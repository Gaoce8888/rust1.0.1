=== 编译错误和警告报告 ===
生成时间: Mon Jul 21 03:58:47 PM UTC 2025

{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/build/proc-macro2-c454ffcbf644952d/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro"],"env":[],"out_dir":"/workspace/target/debug/build/proc-macro2-212a07bf064893ff/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libunicode_ident-b819065e1129ac8f.rlib","/workspace/target/debug/deps/libunicode_ident-b819065e1129ac8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcfg_if-c1b23febb2bdd759.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/libc-32c367546eadd31c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/deps/libproc_macro2-e7686c1803b8a05d.rlib","/workspace/target/debug/deps/libproc_macro2-e7686c1803b8a05d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/workspace/target/debug/build/libc-9e47f02b6d2dbd88/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libversion_check-b90484e2538cd154.rlib","/workspace/target/debug/deps/libversion_check-b90484e2538cd154.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/smallvec-1.15.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/smallvec-1.15.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics","const_new"],"filenames":["/workspace/target/debug/deps/libsmallvec-e0bf525ae8d54e0c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/deps/libquote-50b72a7fc51fc7f8.rlib","/workspace/target/debug/deps/libquote-50b72a7fc51fc7f8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/liblibc-0e7183cf3a22828e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libbytes-b028778e95656afc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libautocfg-3f35848165c0b859.rlib","/workspace/target/debug/deps/libautocfg-3f35848165c0b859.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.104/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.104/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","fold","full","parsing","printing","proc-macro","visit","visit-mut"],"filenames":["/workspace/target/debug/deps/libsyn-4855d2c085859108.rlib","/workspace/target/debug/deps/libsyn-4855d2c085859108.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_project_lite-52bc69d28282fcab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libitoa-61308ceb3a64961c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/workspace/target/debug/build/lock_api-755f3219bf6769dc/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"/workspace/target/debug/build/lock_api-e9a76fe480e7232f/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libscopeguard-139c7959839ee759.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/parking_lot_core-bdc9ae71d79ae6d3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/typenum-9f6b23f7a6ab6791/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/workspace/target/debug/deps/liblock_api-8e80f2d771394a7d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/parking_lot_core-a4e4ed3cd080699a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libfutures_core-48ec4204ba1a8c43.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/typenum-e18f4728fe1b6cb2/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libparking_lot_core-768981bb2f3b19b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synstructure@0.13.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/synstructure-0.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synstructure","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/synstructure-0.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/deps/libsynstructure-f506dbd1ff5fa461.rlib","/workspace/target/debug/deps/libsynstructure-f506dbd1ff5fa461.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libfnv-004345d9382cdeb3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/workspace/target/debug/build/serde-a34fb68d8535a172/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.12.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.12.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libparking_lot-1bacf7ee40bbef6e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/serde-9f5a84a85498bbcc/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-macros-2.5.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-macros-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtokio_macros-33a9bd5c3680825f.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libserde_derive-7fb06a80898739e5.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.5.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.5.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/workspace/target/debug/deps/libsocket2-aa298f19fb967aae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#signal-hook-registry@1.4.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/signal-hook-registry-1.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"signal_hook_registry","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/signal-hook-registry-1.4.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsignal_hook_registry-3fcf8d556416743a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mio-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mio-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["/workspace/target/debug/deps/libmio-3d8abc007ae8a084.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/workspace/target/debug/build/generic-array-377b36b92ef798e6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-sink-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-sink-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libfutures_sink-fdc1164592010f99.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence"],"env":[],"out_dir":"/workspace/target/debug/build/generic-array-9653330d009e2400/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.46.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.46.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.46.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","full","io-std","io-util","libc","macros","mio","net","parking_lot","process","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","time","tokio-macros"],"filenames":["/workspace/target/debug/deps/libtokio-623ed171f4451548.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/workspace/target/debug/deps/libserde-54c396fb003a16cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom-derive@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-derive-0.1.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerofrom_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-derive-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libzerofrom_derive-a6c9433760e077d2.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/liblog-29900f3cda0c8c0a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke-derive@0.8.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-derive-0.8.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"yoke_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-derive-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libyoke_derive-2fccfe71e9dac54b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/workspace/target/debug/deps/libstable_deref_trait-8021b897a31f6d12.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/workspace/target/debug/deps/libzerofrom-fd0da5eeec016ab0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-macro-0.3.31/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-macro-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libfutures_macro-3b88b13c5aa7c14f.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libslab-8e68b3bdf43e141a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-task-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-task-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/workspace/target/debug/deps/libfutures_task-ef6ab5ee89fb068a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.8.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","zerofrom"],"filenames":["/workspace/target/debug/deps/libyoke-3340ce432dc50778.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-utils-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-utils-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_utils-6cd9f54c84fd8ca0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec-derive@0.11.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-derive-0.11.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerovec_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-derive-0.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libzerovec_derive-089a4c6789e6622d.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#displaydoc@0.2.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.2.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"displaydoc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libdisplaydoc-cb7ff32961b39d42.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","default","futures-macro","futures-sink","sink","slab","std"],"filenames":["/workspace/target/debug/deps/libfutures_util-545c9aa263c97210.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.11.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-0.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-0.11.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","yoke"],"filenames":["/workspace/target/debug/deps/libzerovec-a26ed000a02ff45d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/httparse-e480d527e28a5478/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.21.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.21.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/workspace/target/debug/deps/libonce_cell-95c50c9cb4f9fc3a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libmemchr-c99c2de262bba972.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.34","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.34/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","once_cell","std"],"filenames":["/workspace/target/debug/deps/libtracing_core-25fd3b08e637c320.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","linked_libs":[],"linked_paths":[],"cfgs":["httparse_simd_neon_intrinsics","httparse_simd"],"env":[],"out_dir":"/workspace/target/debug/build/httparse-4b631b322bc8d5bf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.8.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tinystr-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tinystr-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zerovec"],"filenames":["/workspace/target/debug/deps/libtinystr-d2e2c89d3b29b635.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httparse","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libhttparse-274f9577fa16b166.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtypenum-e5e565bcde271ca5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/libgetrandom-db2262137156d05c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.6.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/writeable-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/writeable-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwriteable-e1b8972ce9dd1637.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.8.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/litemap-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/litemap-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/workspace/target/debug/deps/liblitemap-707b9cf7dcc1d76b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libpercent_encoding-05f4e4d38e50efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/workspace/target/debug/deps/libgeneric_array-04a11deef4c6fc6b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#potential_utf@0.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/potential_utf-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"potential_utf","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/potential_utf-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/workspace/target/debug/deps/libpotential_utf-b5a622198c7d69e6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/form_urlencoded-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/form_urlencoded-1.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libform_urlencoded-c6fe90c554dc8b39.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locale_core@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locale_core-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locale_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locale_core-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/workspace/target/debug/deps/libicu_locale_core-20009d79861ec3ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerotrie@0.2.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerotrie-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerotrie","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerotrie-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["yoke","zerofrom"],"filenames":["/workspace/target/debug/deps/libzerotrie-72b665e423b1e9ef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@1.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-1.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-1.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libhttp-23b02d79f146e16f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.30","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.30/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.30/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtracing_attributes-7cd0f6a81ad51acb.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libequivalent-e5f10bba31e9cb86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/icu_normalizer_data-2cc264e43b250415/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhashbrown-8ab69b51e3a52454.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/icu_properties_data-652ca85be085f2a4/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.41/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","log","std","tracing-attributes"],"filenames":["/workspace/target/debug/deps/libtracing-43bb4546a34b816c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/icu_normalizer_data-a4717b94578676f1/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.10.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/workspace/target/debug/deps/libindexmap-9e556f4e9a021a21.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/icu_properties_data-2c12585a04792735/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["baked","zerotrie"],"filenames":["/workspace/target/debug/deps/libicu_provider-beb3eb3c701694cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_collections-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_collections-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libicu_collections-c72638e8be04d04c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httpdate-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httpdate","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httpdate-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttpdate-de91c78316df505f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-service-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_service","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-service-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtower_service-a14786f17fc9e6b7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libshlex-f89a81c775bffe7d.rlib","/workspace/target/debug/deps/libshlex-f89a81c775bffe7d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libryu-bf5e06daa6d02f50.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libicu_properties_data-8306d68085cfba85.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.29","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.29/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.29/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcc-1a1815cf9be2cfda.rlib","/workspace/target/debug/deps/libcc-1a1815cf9be2cfda.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libicu_normalizer_data-3192f6cea5bf28ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/libcrypto_common-112328eb7d72f379.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libblock_buffer-581604cbf9fa1514.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-channel-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-channel-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","futures-sink","sink","std"],"filenames":["/workspace/target/debug/deps/libfutures_channel-9b7f37b99227eb18.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime-0.3.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime-0.3.17/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libmime-6344d6741b334140.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/workspace/target/debug/deps/libmemchr-4f8f428566d9043a.rlib","/workspace/target/debug/deps/libmemchr-4f8f428566d9043a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcfg_if-8ea14fa1522cef8c.rlib","/workspace/target/debug/deps/libcfg_if-8ea14fa1522cef8c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/workspace/target/debug/deps/libaho_corasick-96ba303abb7faf70.rlib","/workspace/target/debug/deps/libaho_corasick-96ba303abb7faf70.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/workspace/target/debug/build/ring-0fe2b7e16351bcd1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","std"],"filenames":["/workspace/target/debug/deps/libdigest-c51bcd2d6653b3a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/workspace/target/debug/deps/libicu_normalizer-6c6b0f18783fbfc6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/workspace/target/debug/deps/libicu_properties-36f69d0435320908.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@0.2.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-0.2.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-0.2.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttp-4ff38adf4e3cd776.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtypenum-ce1cec5acb9c48cd.rlib","/workspace/target/debug/deps/libtypenum-ce1cec5acb9c48cd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/workspace/target/debug/build/serde_json-034a3e0e47fbbbd8/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex_syntax-bd8f3c1aaccdb244.rlib","/workspace/target/debug/deps/libregex_syntax-bd8f3c1aaccdb244.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcpufeatures-8a148ca08079d593.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/workspace/target/debug/deps/libgeneric_array-f5f8e6bc8d9f21a7.rlib","/workspace/target/debug/deps/libgeneric_array-f5f8e6bc8d9f21a7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/workspace/target/debug/build/serde_json-226d0c43fd3dff50/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/workspace/target/debug/deps/libregex_automata-a3303f7c63d6eb1a.rlib","/workspace/target/debug/deps/libregex_automata-a3303f7c63d6eb1a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna_adapter-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna_adapter-1.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/workspace/target/debug/deps/libidna_adapter-5a3fdbbc42bb3694.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","linked_libs":["static=ring_core_0_17_14_","static=ring_core_0_17_14__test"],"linked_paths":["native=/workspace/target/debug/build/ring-55ef82e1ad2102bf/out"],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/ring-55ef82e1ad2102bf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttp_body-d77ca61c95407e5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.15","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-util-0.7.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-util-0.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["codec","default","io"],"filenames":["/workspace/target/debug/deps/libtokio_util-a55d3673e9804a75.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.88","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.88/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.88/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libasync_trait-7d9ac5b31873934b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/proc-macro-error-attr-dfb80c8f71ed6509/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/serde-70bdc5ccf4f698a1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/syn-e84379e65a8c257b/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/workspace/target/debug/build/zerocopy-7b03d57010097afc/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libutf8_iter-1268617f6ad4f3b8.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/proc-macro-error-attr-1aeccc7c7fd3f024/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.0.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/workspace/target/debug/deps/libidna-23ba4bcdb72445ad.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/workspace/target/debug/build/zerocopy-233ac8d332e81216/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"/workspace/target/debug/build/syn-cb42a790736f3574/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/serde-e7a304c3cdda1678/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex-91a82c445294440b.rlib","/workspace/target/debug/deps/libregex-91a82c445294440b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/workspace/target/debug/deps/libserde_json-c5fa299487b27db3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["/workspace/target/debug/build/proc-macro-error-64c5f00cfe53aa6e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/build/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/rustversion-9aace374c91c9634/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/untrusted-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/untrusted-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libuntrusted-d9d632d63e08488c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/rustversion-70f925abb9cdf490/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":["use_fallback"],"env":[],"out_dir":"/workspace/target/debug/build/proc-macro-error-f3f9fb61ae516296/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/workspace/target/debug/deps/libzerocopy-a6cdf31ece62212e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/workspace/target/debug/deps/libring-2563062d2f03d3d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsyn-f977835d90dee703.rlib","/workspace/target/debug/deps/libsyn-f977835d90dee703.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libserde-bcae17a6a7de4f3a.rlib","/workspace/target/debug/deps/libserde-bcae17a6a7de4f3a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/liburl-434f1e2c0e037fdc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"proc_macro_error_attr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libproc_macro_error_attr-bab9581208b16b31.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libblock_buffer-81eb9afb967de30b.rlib","/workspace/target/debug/deps/libblock_buffer-81eb9afb967de30b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/libcrypto_common-5169bf024a886718.rlib","/workspace/target/debug/deps/libcrypto_common-5169bf024a886718.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_urlencoded-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_urlencoded","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_urlencoded-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libserde_urlencoded-565312b826a0f856.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libadler2-0ea753dc46eacb47.rlib","/workspace/target/debug/deps/libadler2-0ea753dc46eacb47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-layer-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_layer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-layer-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtower_layer-a02e7b0df18f5e21.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@1.0.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-1.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsync_wrapper-6faeabc338d687de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_error","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["/workspace/target/debug/deps/libproc_macro_error-d4d63a076d19ff50.rlib","/workspace/target/debug/deps/libproc_macro_error-d4d63a076d19ff50.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["with-alloc"],"filenames":["/workspace/target/debug/deps/libminiz_oxide-fa4521751765db6e.rlib","/workspace/target/debug/deps/libminiz_oxide-fa4521751765db6e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","std"],"filenames":["/workspace/target/debug/deps/libdigest-d430bbc8522acd2f.rlib","/workspace/target/debug/deps/libdigest-d430bbc8522acd2f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.17.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/workspace/target/debug/deps/libuuid-bd90f13e17c64d71.rlib","/workspace/target/debug/deps/libuuid-bd90f13e17c64d71.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/workspace/target/debug/deps/libppv_lite86-e7370a0a86315e19.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rustversion","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librustversion-ecd80123c87a6aed.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@1.6.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-1.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-1.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","http1","server"],"filenames":["/workspace/target/debug/deps/libhyper-326efe03b03f5ed9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-util-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-util-0.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libhttp_body_util-1d763d170e0ab1b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libcrc32fast-458bda84780ea855.rlib","/workspace/target/debug/deps/libcrc32fast-458bda84780ea855.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["/workspace/target/debug/deps/librand_core-ab8c7d484915fc9b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libbyteorder-e4bf214e4569625f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsame_file-0fc4969eb8a6253f.rlib","/workspace/target/debug/deps/libsame_file-0fc4969eb8a6253f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/thiserror-e167571878359416/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#try-lock@0.2.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/try-lock-0.2.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"try_lock","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/try-lock-0.2.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtry_lock-54855f85557fa365.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dangerous_configuration","default","log","logging","tls12"],"filenames":["/workspace/target/debug/build/rustls-05018a9ac0ceba95/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libunicase-7491f9ca125b8373.rlib","/workspace/target/debug/deps/libunicase-7491f9ca125b8373.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcpufeatures-318e5759c147f585.rlib","/workspace/target/debug/deps/libcpufeatures-318e5759c147f585.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rev-mappings"],"filenames":["/workspace/target/debug/build/mime_guess-1683c93a05b85fd6/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/rustls-e1ec740a39caedcf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libsha2-c6b8e7720d3687c1.rlib","/workspace/target/debug/deps/libsha2-c6b8e7720d3687c1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#want@0.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/want-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"want","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/want-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwant-6fff336bf943691e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/thiserror-db19521bedcb2d74/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/librand_chacha-f84d271e1c10ce2e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwalkdir-dfcdb4ae090c72ee.rlib","/workspace/target/debug/deps/libwalkdir-dfcdb4ae090c72ee.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.15","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-util-0.1.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-util-0.1.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","http1","server","service","tokio"],"filenames":["/workspace/target/debug/deps/libhyper_util-9f2f5193ecfaab5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.4.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-core-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-core-0.4.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["tracing"],"filenames":["/workspace/target/debug/deps/libaxum_core-20262c4cf71f881e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","miniz_oxide","rust_backend"],"filenames":["/workspace/target/debug/deps/libflate2-32747bda122eaff4.rlib","/workspace/target/debug/deps/libflate2-32747bda122eaff4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-gen@4.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-gen-4.3.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"utoipa_gen","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-gen-4.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum_extras","chrono","regex","uuid"],"filenames":["/workspace/target/debug/deps/libutoipa_gen-89be528f07b72e0b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower@0.5.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__common","futures-core","futures-util","log","make","pin-project-lite","sync_wrapper","tokio","tracing","util"],"filenames":["/workspace/target/debug/deps/libtower-3fa0e49e9f3d0bbf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sct@0.7.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sct-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sct","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sct-0.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsct-4aa59c4a8eea5e39.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.101.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-webpki-0.101.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-webpki-0.101.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libwebpki-9c56159ebc8ac784.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.3.26","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.3.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.3.26/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libh2-5a2193767129e75d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha1@0.10.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha1","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libsha1-06666ccc6660a0c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@0.4.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-0.4.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttp_body-d0375a9419c26622.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_path_to_error@0.1.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_path_to_error-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_path_to_error","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_path_to_error-0.1.17/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libserde_path_to_error-5ab673b55cdcad44.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-1.0.69/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libthiserror_impl-abf2545d6da9f807.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsame_file-d6a9d548e5ffcfd8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.21.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libbase64-8c6bc255bae51233.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libbyteorder-997f07dd77cc9dd0.rlib","/workspace/target/debug/deps/libbyteorder-997f07dd77cc9dd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.8.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/parking_lot_core-ba492b55375341ab/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchit@0.7.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/matchit-0.7.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchit","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/matchit-0.7.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libmatchit-ad9cd86a5737e43d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/crossbeam-utils-483fd5c4156a398e/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.8.6","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/parking_lot_core-f018f5b066164fb9/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zip@0.6.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-0.6.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zip","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-0.6.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["deflate","flate2"],"filenames":["/workspace/target/debug/deps/libzip-bec51feca8d559e4.rlib","/workspace/target/debug/deps/libzip-bec51feca8d559e4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.7.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","form","http1","json","matched-path","original-uri","query","tokio","tower-log","tracing"],"filenames":["/workspace/target/debug/deps/libaxum-49f1060c7a0cf5b5.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/crossbeam-utils-0de16309b3542eff/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libthiserror-f15b12dc312255c6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@0.14.32","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-0.14.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-0.14.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","default","h2","http1","http2","runtime","server","socket2","stream","tcp"],"filenames":["/workspace/target/debug/deps/libhyper-b46c678506407d4f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwalkdir-8808999654f9f307.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dangerous_configuration","default","log","logging","tls12"],"filenames":["/workspace/target/debug/deps/librustls-acb787591ab17680.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa@4.2.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-4.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-4.2.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum_extras","chrono","default","uuid"],"filenames":["/workspace/target/debug/deps/libutoipa-43fa2e511c517910.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["/workspace/target/debug/deps/librand-5534ea9fde5f1b5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-utils@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed_utils-d0c17bfbba83eb54.rlib","/workspace/target/debug/deps/librust_embed_utils-d0c17bfbba83eb54.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["MIME_TYPES_GENERATED_PATH","/workspace/target/debug/build/mime_guess-e30bf1f30ad383e5/out/mime_types_generated.rs"]],"out_dir":"/workspace/target/debug/build/mime_guess-e30bf1f30ad383e5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libsha2-a13e1109bdf85747.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/num-traits-1d3de14f68ac7114/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multer@2.1.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/build/multer-569af2ab0ff35103/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#encoding_rs@0.8.35","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/encoding_rs-0.8.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"encoding_rs","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/encoding_rs-0.8.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/workspace/target/debug/deps/libencoding_rs-d6e4a190b8b4593f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#instant@0.1.13","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/instant-0.1.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"instant","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/instant-0.1.13/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libinstant-451bb987b19b40f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/getrandom-0cc09e5bf01f80bf/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf-8@0.7.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf-8-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf-8-0.7.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libutf8-9ada4bf36b46b51c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libunicase-c003e858cd0625ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-encoding@2.9.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/data-encoding-2.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_encoding","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/data-encoding-2.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libdata_encoding-4fac5d7a1b75e98d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/getrandom-a0e6094bf561b003/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.8.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libparking_lot_core-538fd46b47243dfb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime_guess","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rev-mappings"],"filenames":["/workspace/target/debug/deps/libmime_guess-8bc149c591160b81.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tungstenite@0.21.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tungstenite-0.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tungstenite","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tungstenite-0.21.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["data-encoding","handshake","http","httparse","sha1","url"],"filenames":["/workspace/target/debug/deps/libtungstenite-f46e3e9414bee7ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-utils@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed_utils-e6b348ce3f4cda20.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/workspace/target/debug/build/num-traits-522fb7ad7a4e2fd0/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#multer@2.1.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/multer-ba6694f1e75f50cc/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-impl@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-impl-8.7.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rust_embed_impl","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-impl-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed_impl-e850b737efb72442.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-rustls@0.24.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-rustls-0.24.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_rustls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-rustls-0.24.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","tls12"],"filenames":["/workspace/target/debug/deps/libtokio_rustls-bbb2d516b4477f65.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libcrossbeam_utils-bbb1e9edbf60ae5e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@6.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/build/utoipa-swagger-ui-5c71c13ae2eca9ae/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#combine@4.6.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/combine-4.6.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"combine","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/combine-4.6.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","bytes","futures-core-03","pin-project-lite","std","tokio","tokio-dep","tokio-util"],"filenames":["/workspace/target/debug/deps/libcombine-8f067899e29e9474.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#headers-core@0.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-core-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"headers_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-core-0.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libheaders_core-219e46d987ce0647.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/workspace/target/debug/deps/libaho_corasick-20d3c908746d59e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deadpool-runtime@0.1.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-runtime-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deadpool_runtime","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-runtime-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["tokio_1"],"filenames":["/workspace/target/debug/deps/libdeadpool_runtime-4db017bdc390b6fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_spanned-0.6.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_spanned","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_spanned-0.6.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/workspace/target/debug/deps/libserde_spanned-43f39a507b3537ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.11","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/workspace/target/debug/deps/libtoml_datetime-8ac89c3d7c82ec07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-internal-1.1.10/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"pin_project_internal","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-internal-1.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_project_internal-0c937da77a473a51.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_cpus@1.17.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num_cpus-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_cpus","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num_cpus-1.17.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libnum_cpus-4fc91e19ce167f8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.4.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.4.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsocket2-ba0141d904726f43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libcrc32fast-3e9cfa9e531a7608.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/liblazy_static-d0836efc8886ff28.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/anyhow-6a1ab74bd806ced7/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libadler2-fe366f10e00d60d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.9.8","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["mutex","spin_mutex"],"filenames":["/workspace/target/debug/deps/libspin-74b126554b4646f9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_write@0.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_write-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_write","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_write-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libtoml_write-ac24c77d6b14838a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libwinnow-6999af5555c8fb61.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha1_smol@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1_smol-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha1_smol","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1_smol-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsha1_smol-d35abb30f232794c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"overload","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/liboverload-8a3b5f54a46980b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex_syntax-425ffe04e9060a5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/workspace/target/debug/deps/libregex_automata-d0d55bc5c544dd77.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.27","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["display","parse","serde"],"filenames":["/workspace/target/debug/deps/libtoml_edit-602605a9c430cfab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nu_ansi_term","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libnu_ansi_term-5f9cef388d03e624.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#redis@0.23.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/redis-0.23.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"redis","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/redis-0.23.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["acl","aio","async-trait","bytes","default","futures-util","geospatial","keep-alive","pin-project-lite","script","sha1_smol","socket2","streams","tokio","tokio-comp","tokio-util"],"filenames":["/workspace/target/debug/deps/libredis-55daa09e332b4438.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","linked_libs":[],"linked_paths":[],"cfgs":["std_backtrace"],"env":[],"out_dir":"/workspace/target/debug/build/anyhow-af957a5187795b42/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multer@2.1.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"multer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libmulter-fe2276fa22665bcf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["with-alloc"],"filenames":["/workspace/target/debug/deps/libminiz_oxide-684a057d89525877.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deadpool@0.10.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-0.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deadpool","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-0.10.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-trait","managed","rt_tokio_1"],"filenames":["/workspace/target/debug/deps/libdeadpool-218dd2fb91ecf7c6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sharded_slab","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsharded_slab-95fa4541876a9fd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-1.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-1.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_project-ef3e04c111616305.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#headers@0.3.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"headers","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-0.3.9/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libheaders-81cf78595b1553d1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@6.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/utoipa-swagger-ui-3ed5db516bce7fd5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-rustls@0.24.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-rustls-0.24.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_rustls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-rustls-0.24.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhyper_rustls-49186d05307c2310.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libcrossbeam_epoch-d0a29a0a374dad1e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed-f1ceaaa2cdec9688.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-tungstenite@0.21.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_tungstenite","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.21.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["connect","default","handshake","stream"],"filenames":["/workspace/target/debug/deps/libtokio_tungstenite-c81fd0acef9899be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libnum_traits-0cf43bbb351600e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libgetrandom-75950bea1efbac44.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.11.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.11.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libparking_lot-4e64c51ab778884e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pemfile","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librustls_pemfile-9c194e533341dd5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fxhash@0.2.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fxhash-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fxhash","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fxhash-0.2.1/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libfxhash-1c4aaa3525530be3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_log","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log-tracer","std"],"filenames":["/workspace/target/debug/deps/libtracing_log-46ab57106d2163bf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-impl-0.3.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_stream_impl","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-impl-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libasync_stream_impl-5eefcee219176118.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fs2@0.4.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fs2-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fs2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fs2-0.4.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libfs2-4488349a98a6a593.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libthread_local-aab880ec972b328f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ipnet@2.11.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ipnet-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ipnet","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ipnet-2.11.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libipnet-64c9916bf89ade33.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scoped-tls@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scoped-tls-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scoped_tls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scoped-tls-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libscoped_tls-32c5d1d30b7f1e68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iana-time-zone@0.1.63","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/iana-time-zone-0.1.63/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iana_time_zone","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/iana-time-zone-0.1.63/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fallback"],"filenames":["/workspace/target/debug/deps/libiana_time_zone-e785532e4ab70cac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.25.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/webpki-roots-0.25.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/webpki-roots-0.25.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwebpki_roots-2b86d273408ab463.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@0.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsync_wrapper-d4b9f0dc310244d5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.19","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-subscriber-0.3.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_subscriber","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-subscriber-0.3.19/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi","default","fmt","nu-ansi-term","registry","sharded-slab","smallvec","std","thread_local","tracing-log"],"filenames":["/workspace/target/debug/deps/libtracing_subscriber-fc46a8945cd7a323.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#warp@0.3.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"warp","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","multer","multipart","tokio-tungstenite","websocket"],"filenames":["/workspace/target/debug/deps/libwarp-3f653fe5a3616380.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#reqwest@0.11.27","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"reqwest","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__rustls","__tls","hyper-rustls","json","rustls","rustls-tls","rustls-tls-webpki-roots","serde_json","tokio-rustls","webpki-roots"],"filenames":["/workspace/target/debug/deps/libreqwest-0c49f607ecc904fa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.41","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-link"],"filenames":["/workspace/target/debug/deps/libchrono-45fb4ea6621abeab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sled@0.34.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sled-0.34.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sled","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sled-0.34.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","no_metrics"],"filenames":["/workspace/target/debug/deps/libsled-23cad84ecb2e3a60.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-0.3.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_stream","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libasync_stream-5a34f65e2bae7302.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.17.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rng","serde","std","v4"],"filenames":["/workspace/target/debug/deps/libuuid-c0432a2e6694af8b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@6.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_swagger_ui","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/deps/libutoipa_swagger_ui-f3b26eb1be6ac73c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libanyhow-9d81334b985de06e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deadpool-redis@0.13.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-redis-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deadpool_redis","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-redis-0.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rt_tokio_1"],"filenames":["/workspace/target/debug/deps/libdeadpool_redis-82d0efa46bdb0973.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["/workspace/target/debug/deps/libflate2-1cf8f56fede915e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.8.23","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","display","parse"],"filenames":["/workspace/target/debug/deps/libtoml-6bf749b053d55b5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex-48ee19b0ab9f891b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-rapidoc@3.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-rapidoc-3.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_rapidoc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-rapidoc-3.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/deps/libutoipa_rapidoc-46c8af68be51d5e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-redoc@3.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-redoc-3.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_redoc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-redoc-3.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/deps/libutoipa_redoc-553d606f70b91061.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#md5@0.7.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/md5-0.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/md5-0.7.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libmd5-4e4bcaa3fc069eb1.rmeta"],"executable":null,"fresh":true}
    Checking kefu-system v0.1.0 (/workspace)
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ApiResponse`\n --> src/proxy/react_card_proxy.rs:1:38\n  |\n1 | use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};\n  |                                      ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":35,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":36,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ApiResponse`","spans":[{"byte_end":48,"byte_start":37,"column_end":49,"column_start":38,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":38,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ApiResponse`\n --> src/proxy/analytics_proxy.rs:1:38\n  |\n1 | use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};\n  |                                      ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":35,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":36,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ApiResponse`","spans":[{"byte_end":48,"byte_start":37,"column_end":49,"column_start":38,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":38,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ApiResponse`\n --> src/proxy/enterprise_proxy.rs:1:38\n  |\n1 | use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};\n  |                                      ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":35,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":36,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ApiResponse`","spans":[{"byte_end":48,"byte_start":37,"column_end":49,"column_start":38,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":38,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:119:17\n    |\n118 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n119 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<ReactCardGenerationRequest>`\n    |\n    = note: expected struct `ApiRequest<ReactCardRenderRequest>`\n               found struct `ApiRequest<ReactCardGenerationRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<ReactCardRenderRequest>`\n   found struct `ApiRequest<ReactCardGenerationRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":3811,"byte_start":3800,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<ReactCardGenerationRequest>`","line_end":119,"line_start":119,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":3782,"byte_start":3670,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":118,"line_start":118,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:125:16\n    |\n125 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `ReactCardGenerationResponse`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:125:13\n    |\n125 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4048,"byte_start":4026,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4049,"byte_start":4023,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4048,"byte_start":4026,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ReactCardGenerationResponse`, found `ReactCardRenderResponse`","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4025,"byte_start":4023,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:145:17\n    |\n144 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n145 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<AdaptiveConfigRequest>`\n    |\n    = note: expected struct `ApiRequest<ReactCardRenderRequest>`\n               found struct `ApiRequest<AdaptiveConfigRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<ReactCardRenderRequest>`\n   found struct `ApiRequest<AdaptiveConfigRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4795,"byte_start":4784,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<AdaptiveConfigRequest>`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":4766,"byte_start":4654,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:151:16\n    |\n151 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `AdaptiveConfigResponse`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:151:13\n    |\n151 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":5032,"byte_start":5010,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5033,"byte_start":5007,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5032,"byte_start":5010,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `AdaptiveConfigResponse`, found `ReactCardRenderResponse`","line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5009,"byte_start":5007,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:171:17\n    |\n170 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n171 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<CardTemplateRequest>`\n    |\n    = note: expected struct `ApiRequest<ReactCardRenderRequest>`\n               found struct `ApiRequest<CardTemplateRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<ReactCardRenderRequest>`\n   found struct `ApiRequest<CardTemplateRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5763,"byte_start":5752,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<CardTemplateRequest>`","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":5734,"byte_start":5622,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":170,"line_start":170,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:177:16\n    |\n177 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `CardTemplateResponse`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:177:13\n    |\n177 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6000,"byte_start":5978,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6001,"byte_start":5975,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6000,"byte_start":5978,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `CardTemplateResponse`, found `ReactCardRenderResponse`","line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5977,"byte_start":5975,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:205:17\n    |\n204 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n205 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `ApiRequest<ReactCardRenderRequest>`\n               found struct `ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<ReactCardRenderRequest>`\n   found struct `ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6995,"byte_start":6984,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`","line_end":205,"line_start":205,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":6966,"byte_start":6854,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":204,"line_start":204,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0608]: cannot index into a value of type `ReactCardRenderResponse`\n   --> src/proxy/react_card_proxy.rs:211:38\n    |\n211 |             Ok(response.data.unwrap()[\"template_id\"].as_str().unwrap().to_string())\n    |                                      ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0608","explanation":"An attempt to use index on a type which doesn't implement the `std::ops::Index`\ntrait was performed.\n\nErroneous code example:\n\n```compile_fail,E0608\n0u8[2]; // error: cannot index into a value of type `u8`\n```\n\nTo be able to index into a type it needs to implement the `std::ops::Index`\ntrait. Example:\n\n```\nlet v: Vec<u8> = vec![0, 1, 2, 3];\n\n// The `Vec` type implements the `Index` trait so you can do:\nprintln!(\"{}\", v[2]);\n```\n"},"level":"error","message":"cannot index into a value of type `ReactCardRenderResponse`","spans":[{"byte_end":7247,"byte_start":7232,"column_end":53,"column_start":38,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":38,"text":"            Ok(response.data.unwrap()[\"template_id\"].as_str().unwrap().to_string())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:228:17\n    |\n227 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n228 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `ApiRequest<ReactCardRenderRequest>`\n               found struct `ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<ReactCardRenderRequest>`\n   found struct `ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7992,"byte_start":7981,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`","line_end":228,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":7963,"byte_start":7851,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":227,"line_start":227,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:234:16\n    |\n234 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<HashMap<String, Value>>`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `Vec<HashMap<std::string::String, serde_json::Value>>`\n               found struct `ReactCardRenderResponse`\nhelp: the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:234:13\n    |\n234 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `Vec<HashMap<std::string::String, serde_json::Value>>`\n   found struct `ReactCardRenderResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":8229,"byte_start":8207,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8230,"byte_start":8204,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8229,"byte_start":8207,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `Vec<HashMap<String, Value>>`, found `ReactCardRenderResponse`","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8206,"byte_start":8204,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:139:17\n    |\n138 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n139 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<UserBehaviorRequest>`\n    |\n    = note: expected struct `ApiRequest<AnalyticsEventRequest>`\n               found struct `ApiRequest<UserBehaviorRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<AnalyticsEventRequest>`\n   found struct `ApiRequest<UserBehaviorRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4492,"byte_start":4481,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<UserBehaviorRequest>`","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":4463,"byte_start":4353,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:145:16\n    |\n145 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `UserBehaviorResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:145:13\n    |\n145 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4728,"byte_start":4706,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4729,"byte_start":4703,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4728,"byte_start":4706,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `UserBehaviorResponse`, found `AnalyticsEventResponse`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4705,"byte_start":4703,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:165:17\n    |\n164 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n165 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<MessageAnalysisRequest>`\n    |\n    = note: expected struct `ApiRequest<AnalyticsEventRequest>`\n               found struct `ApiRequest<MessageAnalysisRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<AnalyticsEventRequest>`\n   found struct `ApiRequest<MessageAnalysisRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5461,"byte_start":5450,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<MessageAnalysisRequest>`","line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":5432,"byte_start":5322,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":164,"line_start":164,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:171:16\n    |\n171 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `MessageAnalysisResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:171:13\n    |\n171 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":5697,"byte_start":5675,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5698,"byte_start":5672,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5697,"byte_start":5675,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `MessageAnalysisResponse`, found `AnalyticsEventResponse`","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5674,"byte_start":5672,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:191:17\n    |\n190 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n191 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<RealTimeMetricsRequest>`\n    |\n    = note: expected struct `ApiRequest<AnalyticsEventRequest>`\n               found struct `ApiRequest<RealTimeMetricsRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<AnalyticsEventRequest>`\n   found struct `ApiRequest<RealTimeMetricsRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6436,"byte_start":6425,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<RealTimeMetricsRequest>`","line_end":191,"line_start":191,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":6407,"byte_start":6297,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":190,"line_start":190,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:197:16\n    |\n197 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `RealTimeMetricsResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:197:13\n    |\n197 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6672,"byte_start":6650,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6673,"byte_start":6647,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6672,"byte_start":6650,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `RealTimeMetricsResponse`, found `AnalyticsEventResponse`","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6649,"byte_start":6647,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:217:17\n    |\n216 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n217 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<SmartRecommendationRequest>`\n    |\n    = note: expected struct `ApiRequest<AnalyticsEventRequest>`\n               found struct `ApiRequest<SmartRecommendationRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<AnalyticsEventRequest>`\n   found struct `ApiRequest<SmartRecommendationRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7427,"byte_start":7416,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<SmartRecommendationRequest>`","line_end":217,"line_start":217,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":7398,"byte_start":7288,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:223:16\n    |\n223 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `SmartRecommendationResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:223:13\n    |\n223 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":7663,"byte_start":7641,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7664,"byte_start":7638,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7663,"byte_start":7641,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `SmartRecommendationResponse`, found `AnalyticsEventResponse`","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7640,"byte_start":7638,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:249:17\n    |\n248 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n249 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `ApiRequest<AnalyticsEventRequest>`\n               found struct `ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<AnalyticsEventRequest>`\n   found struct `ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8584,"byte_start":8573,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`","line_end":249,"line_start":249,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":8555,"byte_start":8445,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":248,"line_start":248,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:255:16\n    |\n255 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `HashMap<std::string::String, serde_json::Value>`\n               found struct `AnalyticsEventResponse`\nhelp: the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:255:13\n    |\n255 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `HashMap<std::string::String, serde_json::Value>`\n   found struct `AnalyticsEventResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":8820,"byte_start":8798,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8821,"byte_start":8795,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8820,"byte_start":8798,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `AnalyticsEventResponse`","line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8797,"byte_start":8795,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:281:17\n    |\n280 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n281 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `ApiRequest<AnalyticsEventRequest>`\n               found struct `ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<AnalyticsEventRequest>`\n   found struct `ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9746,"byte_start":9735,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`","line_end":281,"line_start":281,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":9717,"byte_start":9607,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:287:16\n    |\n287 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `HashMap<std::string::String, serde_json::Value>`\n               found struct `AnalyticsEventResponse`\nhelp: the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:287:13\n    |\n287 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `HashMap<std::string::String, serde_json::Value>`\n   found struct `AnalyticsEventResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":9982,"byte_start":9960,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":9983,"byte_start":9957,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9982,"byte_start":9960,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `AnalyticsEventResponse`","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":9959,"byte_start":9957,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:137:17\n    |\n136 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n137 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HealthMonitorRequest>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<HealthMonitorRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<HealthMonitorRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4217,"byte_start":4206,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HealthMonitorRequest>`","line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":4188,"byte_start":4082,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:143:16\n    |\n143 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HealthMonitorResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:143:13\n    |\n143 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4454,"byte_start":4432,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4455,"byte_start":4429,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4454,"byte_start":4432,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `HealthMonitorResponse`, found `LoadBalancerResponse`","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4431,"byte_start":4429,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:163:17\n    |\n162 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n163 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<PerformanceOptimizationRequest>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<PerformanceOptimizationRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<PerformanceOptimizationRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5207,"byte_start":5196,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<PerformanceOptimizationRequest>`","line_end":163,"line_start":163,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":5178,"byte_start":5072,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:169:16\n    |\n169 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `PerformanceOptimizationResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:169:13\n    |\n169 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":5444,"byte_start":5422,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5445,"byte_start":5419,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5444,"byte_start":5422,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `PerformanceOptimizationResponse`, found `LoadBalancerResponse`","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5421,"byte_start":5419,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:189:17\n    |\n188 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n189 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<FailoverRequest>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<FailoverRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<FailoverRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6152,"byte_start":6141,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<FailoverRequest>`","line_end":189,"line_start":189,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":6123,"byte_start":6017,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":188,"line_start":188,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:195:16\n    |\n195 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `FailoverResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:195:13\n    |\n195 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6389,"byte_start":6367,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6390,"byte_start":6364,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6389,"byte_start":6367,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `FailoverResponse`, found `LoadBalancerResponse`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6366,"byte_start":6364,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:215:17\n    |\n214 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n215 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<AutoScalingRequest>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<AutoScalingRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<AutoScalingRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7096,"byte_start":7085,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<AutoScalingRequest>`","line_end":215,"line_start":215,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":7067,"byte_start":6961,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":214,"line_start":214,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:221:16\n    |\n221 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `AutoScalingResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:221:13\n    |\n221 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":7333,"byte_start":7311,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7334,"byte_start":7308,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7333,"byte_start":7311,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `AutoScalingResponse`, found `LoadBalancerResponse`","line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7310,"byte_start":7308,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:238:17\n    |\n237 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n238 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8031,"byte_start":8020,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`","line_end":238,"line_start":238,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":8002,"byte_start":7896,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":237,"line_start":237,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:244:16\n    |\n244 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `HashMap<std::string::String, serde_json::Value>`\n               found struct `LoadBalancerResponse`\nhelp: the type constructed contains `LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:244:13\n    |\n244 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `HashMap<std::string::String, serde_json::Value>`\n   found struct `LoadBalancerResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":8268,"byte_start":8246,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8269,"byte_start":8243,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8268,"byte_start":8246,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `LoadBalancerResponse`","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8245,"byte_start":8243,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:264:17\n    |\n263 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n264 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HashMap<String, Value>>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<HashMap<std::string::String, serde_json::Value>>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<HashMap<std::string::String, serde_json::Value>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8998,"byte_start":8987,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HashMap<String, Value>>`","line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":8969,"byte_start":8863,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":263,"line_start":263,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0608]: cannot index into a value of type `LoadBalancerResponse`\n   --> src/proxy/enterprise_proxy.rs:270:38\n    |\n270 |             Ok(response.data.unwrap()[\"config_id\"].as_str().unwrap().to_string())\n    |                                      ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0608","explanation":"An attempt to use index on a type which doesn't implement the `std::ops::Index`\ntrait was performed.\n\nErroneous code example:\n\n```compile_fail,E0608\n0u8[2]; // error: cannot index into a value of type `u8`\n```\n\nTo be able to index into a type it needs to implement the `std::ops::Index`\ntrait. Example:\n\n```\nlet v: Vec<u8> = vec![0, 1, 2, 3];\n\n// The `Vec` type implements the `Index` trait so you can do:\nprintln!(\"{}\", v[2]);\n```\n"},"level":"error","message":"cannot index into a value of type `LoadBalancerResponse`","spans":[{"byte_end":9248,"byte_start":9235,"column_end":51,"column_start":38,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":270,"line_start":270,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":38,"text":"            Ok(response.data.unwrap()[\"config_id\"].as_str().unwrap().to_string())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:296:17\n    |\n295 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n296 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `ApiRequest<LoadBalancerRequest>`\n               found struct `ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `ApiRequest<LoadBalancerRequest>`\n   found struct `ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":10185,"byte_start":10174,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`","line_end":296,"line_start":296,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":10156,"byte_start":10050,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":295,"line_start":295,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:302:16\n    |\n302 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `HashMap<std::string::String, serde_json::Value>`\n               found struct `LoadBalancerResponse`\nhelp: the type constructed contains `LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:302:13\n    |\n302 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `HashMap<std::string::String, serde_json::Value>`\n   found struct `LoadBalancerResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":10422,"byte_start":10400,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":10423,"byte_start":10397,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":10422,"byte_start":10400,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `LoadBalancerResponse`","line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":10399,"byte_start":10397,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 36 previous errors; 3 warnings emitted\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 36 previous errors; 3 warnings emitted","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0308, E0608.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0308, E0608.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0308`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0308`.","spans":[]}}
error: could not compile `kefu-system` (lib) due to 37 previous errors; 3 warnings emitted
{"reason":"build-finished","success":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/build/proc-macro2-c454ffcbf644952d/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["wrap_proc_macro"],"env":[],"out_dir":"/workspace/target/debug/build/proc-macro2-212a07bf064893ff/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libunicode_ident-b819065e1129ac8f.rlib","/workspace/target/debug/deps/libunicode_ident-b819065e1129ac8f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.95/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/deps/libproc_macro2-e7686c1803b8a05d.rlib","/workspace/target/debug/deps/libproc_macro2-e7686c1803b8a05d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.40/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.40/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/deps/libquote-50b72a7fc51fc7f8.rlib","/workspace/target/debug/deps/libquote-50b72a7fc51fc7f8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcfg_if-c1b23febb2bdd759.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/libc-32c367546eadd31c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libversion_check-b90484e2538cd154.rlib","/workspace/target/debug/deps/libversion_check-b90484e2538cd154.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.104/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.104/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","fold","full","parsing","printing","proc-macro","visit","visit-mut"],"filenames":["/workspace/target/debug/deps/libsyn-4855d2c085859108.rlib","/workspace/target/debug/deps/libsyn-4855d2c085859108.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/workspace/target/debug/build/libc-9e47f02b6d2dbd88/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/smallvec-1.15.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/smallvec-1.15.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics","const_new"],"filenames":["/workspace/target/debug/deps/libsmallvec-e0bf525ae8d54e0c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.10.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libbytes-b028778e95656afc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.174","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.174/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/liblibc-0e7183cf3a22828e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libautocfg-3f35848165c0b859.rlib","/workspace/target/debug/deps/libautocfg-3f35848165c0b859.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_project_lite-52bc69d28282fcab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libitoa-61308ceb3a64961c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/workspace/target/debug/build/lock_api-755f3219bf6769dc/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libscopeguard-139c7959839ee759.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/parking_lot_core-bdc9ae71d79ae6d3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libfutures_core-48ec4204ba1a8c43.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"/workspace/target/debug/build/lock_api-e9a76fe480e7232f/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/parking_lot_core-a4e4ed3cd080699a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/typenum-9f6b23f7a6ab6791/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synstructure@0.13.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/synstructure-0.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synstructure","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/synstructure-0.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/workspace/target/debug/deps/libsynstructure-f506dbd1ff5fa461.rlib","/workspace/target/debug/deps/libsynstructure-f506dbd1ff5fa461.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.13","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.13/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/workspace/target/debug/deps/liblock_api-8e80f2d771394a7d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/typenum-e18f4728fe1b6cb2/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.11","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libparking_lot_core-768981bb2f3b19b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libfnv-004345d9382cdeb3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/workspace/target/debug/build/serde-a34fb68d8535a172/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.12.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.12.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libparking_lot-1bacf7ee40bbef6e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mio-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mio-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["/workspace/target/debug/deps/libmio-3d8abc007ae8a084.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#signal-hook-registry@1.4.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/signal-hook-registry-1.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"signal_hook_registry","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/signal-hook-registry-1.4.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsignal_hook_registry-3fcf8d556416743a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/serde-9f5a84a85498bbcc/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.5.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.5.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/workspace/target/debug/deps/libsocket2-aa298f19fb967aae.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.219/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libserde_derive-7fb06a80898739e5.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-macros-2.5.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-macros-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtokio_macros-33a9bd5c3680825f.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/workspace/target/debug/build/generic-array-377b36b92ef798e6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-sink-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-sink-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libfutures_sink-fdc1164592010f99.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","serde_derive","std"],"filenames":["/workspace/target/debug/deps/libserde-54c396fb003a16cf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.46.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.46.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.46.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","full","io-std","io-util","libc","macros","mio","net","parking_lot","process","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","time","tokio-macros"],"filenames":["/workspace/target/debug/deps/libtokio-623ed171f4451548.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence"],"env":[],"out_dir":"/workspace/target/debug/build/generic-array-9653330d009e2400/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom-derive@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-derive-0.1.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerofrom_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-derive-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libzerofrom_derive-a6c9433760e077d2.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.27","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/liblog-29900f3cda0c8c0a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke-derive@0.8.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-derive-0.8.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"yoke_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-derive-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libyoke_derive-2fccfe71e9dac54b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/workspace/target/debug/deps/libzerofrom-fd0da5eeec016ab0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/workspace/target/debug/deps/libstable_deref_trait-8021b897a31f6d12.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-macro-0.3.31/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-macro-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libfutures_macro-3b88b13c5aa7c14f.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-utils-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-utils-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_utils-6cd9f54c84fd8ca0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.8.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","zerofrom"],"filenames":["/workspace/target/debug/deps/libyoke-3340ce432dc50778.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libslab-8e68b3bdf43e141a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-task-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-task-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/workspace/target/debug/deps/libfutures_task-ef6ab5ee89fb068a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec-derive@0.11.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-derive-0.11.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerovec_derive","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-derive-0.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libzerovec_derive-089a4c6789e6622d.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","default","futures-macro","futures-sink","sink","slab","std"],"filenames":["/workspace/target/debug/deps/libfutures_util-545c9aa263c97210.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.11.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-0.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-0.11.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive","yoke"],"filenames":["/workspace/target/debug/deps/libzerovec-a26ed000a02ff45d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#displaydoc@0.2.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.2.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"displaydoc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libdisplaydoc-cb7ff32961b39d42.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/httparse-e480d527e28a5478/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.21.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.21.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/workspace/target/debug/deps/libonce_cell-95c50c9cb4f9fc3a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libmemchr-c99c2de262bba972.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","linked_libs":[],"linked_paths":[],"cfgs":["httparse_simd_neon_intrinsics","httparse_simd"],"env":[],"out_dir":"/workspace/target/debug/build/httparse-4b631b322bc8d5bf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.8.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tinystr-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tinystr-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zerovec"],"filenames":["/workspace/target/debug/deps/libtinystr-d2e2c89d3b29b635.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.34","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.34/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.34/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","once_cell","std"],"filenames":["/workspace/target/debug/deps/libtracing_core-25fd3b08e637c320.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.10.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httparse","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libhttparse-274f9577fa16b166.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtypenum-e5e565bcde271ca5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.16","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/libgetrandom-db2262137156d05c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libpercent_encoding-05f4e4d38e50efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.8.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/litemap-0.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/litemap-0.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/workspace/target/debug/deps/liblitemap-707b9cf7dcc1d76b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.6.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/writeable-0.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/writeable-0.6.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwriteable-e1b8972ce9dd1637.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/workspace/target/debug/deps/libgeneric_array-04a11deef4c6fc6b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/form_urlencoded-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/form_urlencoded-1.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libform_urlencoded-c6fe90c554dc8b39.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locale_core@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locale_core-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locale_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locale_core-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/workspace/target/debug/deps/libicu_locale_core-20009d79861ec3ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#potential_utf@0.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/potential_utf-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"potential_utf","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/potential_utf-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/workspace/target/debug/deps/libpotential_utf-b5a622198c7d69e6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerotrie@0.2.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerotrie-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerotrie","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerotrie-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["yoke","zerofrom"],"filenames":["/workspace/target/debug/deps/libzerotrie-72b665e423b1e9ef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@1.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-1.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-1.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libhttp-23b02d79f146e16f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.30","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.30/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.30/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtracing_attributes-7cd0f6a81ad51acb.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhashbrown-8ab69b51e3a52454.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/icu_properties_data-652ca85be085f2a4/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/icu_normalizer_data-2cc264e43b250415/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libequivalent-e5f10bba31e9cb86.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.41/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","log","std","tracing-attributes"],"filenames":["/workspace/target/debug/deps/libtracing-43bb4546a34b816c.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/icu_properties_data-2c12585a04792735/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.10.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/workspace/target/debug/deps/libindexmap-9e556f4e9a021a21.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/icu_normalizer_data-a4717b94578676f1/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_collections-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_collections-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libicu_collections-c72638e8be04d04c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["baked","zerotrie"],"filenames":["/workspace/target/debug/deps/libicu_provider-beb3eb3c701694cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httpdate-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httpdate","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/httpdate-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttpdate-de91c78316df505f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-service-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_service","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-service-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtower_service-a14786f17fc9e6b7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libryu-bf5e06daa6d02f50.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libshlex-f89a81c775bffe7d.rlib","/workspace/target/debug/deps/libshlex-f89a81c775bffe7d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.29","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.29/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.29/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcc-1a1815cf9be2cfda.rlib","/workspace/target/debug/deps/libcc-1a1815cf9be2cfda.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libicu_normalizer_data-3192f6cea5bf28ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libicu_properties_data-8306d68085cfba85.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/libcrypto_common-112328eb7d72f379.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libblock_buffer-581604cbf9fa1514.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-channel-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-channel-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","futures-sink","sink","std"],"filenames":["/workspace/target/debug/deps/libfutures_channel-9b7f37b99227eb18.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime-0.3.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime-0.3.17/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libmime-6344d6741b334140.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcfg_if-8ea14fa1522cef8c.rlib","/workspace/target/debug/deps/libcfg_if-8ea14fa1522cef8c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/workspace/target/debug/deps/libmemchr-4f8f428566d9043a.rlib","/workspace/target/debug/deps/libmemchr-4f8f428566d9043a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","std"],"filenames":["/workspace/target/debug/deps/libdigest-c51bcd2d6653b3a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@2.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/workspace/target/debug/deps/libicu_normalizer-6c6b0f18783fbfc6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/workspace/target/debug/deps/libicu_properties-36f69d0435320908.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/workspace/target/debug/deps/libaho_corasick-96ba303abb7faf70.rlib","/workspace/target/debug/deps/libaho_corasick-96ba303abb7faf70.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/workspace/target/debug/build/ring-0fe2b7e16351bcd1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtypenum-ce1cec5acb9c48cd.rlib","/workspace/target/debug/deps/libtypenum-ce1cec5acb9c48cd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@0.2.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-0.2.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-0.2.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttp-4ff38adf4e3cd776.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcpufeatures-8a148ca08079d593.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/workspace/target/debug/build/serde_json-034a3e0e47fbbbd8/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex_syntax-bd8f3c1aaccdb244.rlib","/workspace/target/debug/deps/libregex_syntax-bd8f3c1aaccdb244.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/workspace/target/debug/deps/libgeneric_array-f5f8e6bc8d9f21a7.rlib","/workspace/target/debug/deps/libgeneric_array-f5f8e6bc8d9f21a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/workspace/target/debug/deps/libregex_automata-a3303f7c63d6eb1a.rlib","/workspace/target/debug/deps/libregex_automata-a3303f7c63d6eb1a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/workspace/target/debug/build/serde_json-226d0c43fd3dff50/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","linked_libs":["static=ring_core_0_17_14_","static=ring_core_0_17_14__test"],"linked_paths":["native=/workspace/target/debug/build/ring-55ef82e1ad2102bf/out"],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/ring-55ef82e1ad2102bf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna_adapter-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna_adapter-1.2.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/workspace/target/debug/deps/libidna_adapter-5a3fdbbc42bb3694.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttp_body-d77ca61c95407e5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.15","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-util-0.7.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-util-0.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["codec","default","io"],"filenames":["/workspace/target/debug/deps/libtokio_util-a55d3673e9804a75.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.88","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.88/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.88/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libasync_trait-7d9ac5b31873934b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/proc-macro-error-attr-dfb80c8f71ed6509/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/syn-e84379e65a8c257b/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libutf8_iter-1268617f6ad4f3b8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/workspace/target/debug/build/zerocopy-7b03d57010097afc/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/serde-70bdc5ccf4f698a1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.0.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/workspace/target/debug/deps/libidna-23ba4bcdb72445ad.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/serde-e7a304c3cdda1678/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"/workspace/target/debug/build/syn-cb42a790736f3574/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/workspace/target/debug/build/zerocopy-233ac8d332e81216/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/proc-macro-error-attr-1aeccc7c7fd3f024/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/workspace/target/debug/deps/libserde_json-c5fa299487b27db3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex-91a82c445294440b.rlib","/workspace/target/debug/deps/libregex-91a82c445294440b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["/workspace/target/debug/build/proc-macro-error-64c5f00cfe53aa6e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/build/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/rustversion-9aace374c91c9634/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/untrusted-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/untrusted-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libuntrusted-d9d632d63e08488c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"proc_macro_error_attr","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-attr-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libproc_macro_error_attr-bab9581208b16b31.so"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","linked_libs":[],"linked_paths":[],"cfgs":["use_fallback"],"env":[],"out_dir":"/workspace/target/debug/build/proc-macro-error-f3f9fb61ae516296/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/rustversion-70f925abb9cdf490/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.14","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/workspace/target/debug/deps/libring-2563062d2f03d3d8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.26","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/workspace/target/debug/deps/libzerocopy-a6cdf31ece62212e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsyn-f977835d90dee703.rlib","/workspace/target/debug/deps/libsyn-f977835d90dee703.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/liburl-434f1e2c0e037fdc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libserde-bcae17a6a7de4f3a.rlib","/workspace/target/debug/deps/libserde-bcae17a6a7de4f3a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libblock_buffer-81eb9afb967de30b.rlib","/workspace/target/debug/deps/libblock_buffer-81eb9afb967de30b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/libcrypto_common-5169bf024a886718.rlib","/workspace/target/debug/deps/libcrypto_common-5169bf024a886718.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_urlencoded-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_urlencoded","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_urlencoded-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libserde_urlencoded-565312b826a0f856.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-layer-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_layer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-layer-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtower_layer-a02e7b0df18f5e21.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@1.0.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-1.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsync_wrapper-6faeabc338d687de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libadler2-0ea753dc46eacb47.rlib","/workspace/target/debug/deps/libadler2-0ea753dc46eacb47.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["with-alloc"],"filenames":["/workspace/target/debug/deps/libminiz_oxide-fa4521751765db6e.rlib","/workspace/target/debug/deps/libminiz_oxide-fa4521751765db6e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.17.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/workspace/target/debug/deps/libuuid-bd90f13e17c64d71.rlib","/workspace/target/debug/deps/libuuid-bd90f13e17c64d71.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","std"],"filenames":["/workspace/target/debug/deps/libdigest-d430bbc8522acd2f.rlib","/workspace/target/debug/deps/libdigest-d430bbc8522acd2f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rustversion","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librustversion-ecd80123c87a6aed.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_error","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-error-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","syn","syn-error"],"filenames":["/workspace/target/debug/deps/libproc_macro_error-d4d63a076d19ff50.rlib","/workspace/target/debug/deps/libproc_macro_error-d4d63a076d19ff50.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/workspace/target/debug/deps/libppv_lite86-e7370a0a86315e19.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-util-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-util-0.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libhttp_body_util-1d763d170e0ab1b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@1.6.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-1.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-1.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","http1","server"],"filenames":["/workspace/target/debug/deps/libhyper-326efe03b03f5ed9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libcrc32fast-458bda84780ea855.rlib","/workspace/target/debug/deps/libcrc32fast-458bda84780ea855.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["/workspace/target/debug/deps/librand_core-ab8c7d484915fc9b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libcpufeatures-318e5759c147f585.rlib","/workspace/target/debug/deps/libcpufeatures-318e5759c147f585.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/thiserror-e167571878359416/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dangerous_configuration","default","log","logging","tls12"],"filenames":["/workspace/target/debug/build/rustls-05018a9ac0ceba95/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsame_file-0fc4969eb8a6253f.rlib","/workspace/target/debug/deps/libsame_file-0fc4969eb8a6253f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libbyteorder-e4bf214e4569625f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libunicase-7491f9ca125b8373.rlib","/workspace/target/debug/deps/libunicase-7491f9ca125b8373.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#try-lock@0.2.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/try-lock-0.2.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"try_lock","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/try-lock-0.2.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libtry_lock-54855f85557fa365.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rev-mappings"],"filenames":["/workspace/target/debug/build/mime_guess-1683c93a05b85fd6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwalkdir-dfcdb4ae090c72ee.rlib","/workspace/target/debug/deps/libwalkdir-dfcdb4ae090c72ee.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/rustls-e1ec740a39caedcf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#want@0.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/want-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"want","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/want-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwant-6fff336bf943691e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","miniz_oxide","rust_backend"],"filenames":["/workspace/target/debug/deps/libflate2-32747bda122eaff4.rlib","/workspace/target/debug/deps/libflate2-32747bda122eaff4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libsha2-c6b8e7720d3687c1.rlib","/workspace/target/debug/deps/libsha2-c6b8e7720d3687c1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/thiserror-db19521bedcb2d74/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/workspace/target/debug/deps/librand_chacha-f84d271e1c10ce2e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.4.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-core-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-core-0.4.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["tracing"],"filenames":["/workspace/target/debug/deps/libaxum_core-20262c4cf71f881e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-gen@4.3.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-gen-4.3.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"utoipa_gen","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-gen-4.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum_extras","chrono","regex","uuid"],"filenames":["/workspace/target/debug/deps/libutoipa_gen-89be528f07b72e0b.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.15","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-util-0.1.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_util","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-util-0.1.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","http1","server","service","tokio"],"filenames":["/workspace/target/debug/deps/libhyper_util-9f2f5193ecfaab5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower@0.5.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__common","futures-core","futures-util","log","make","pin-project-lite","sync_wrapper","tokio","tracing","util"],"filenames":["/workspace/target/debug/deps/libtower-3fa0e49e9f3d0bbf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.101.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-webpki-0.101.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-webpki-0.101.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libwebpki-9c56159ebc8ac784.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sct@0.7.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sct-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sct","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sct-0.7.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsct-4aa59c4a8eea5e39.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.3.26","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.3.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.3.26/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libh2-5a2193767129e75d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha1@0.10.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha1","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libsha1-06666ccc6660a0c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@0.4.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-0.4.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhttp_body-d0375a9419c26622.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_path_to_error@0.1.17","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_path_to_error-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_path_to_error","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_path_to_error-0.1.17/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libserde_path_to_error-5ab673b55cdcad44.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-1.0.69/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libthiserror_impl-abf2545d6da9f807.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.21.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libbase64-8c6bc255bae51233.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.8.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/parking_lot_core-ba492b55375341ab/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchit@0.7.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/matchit-0.7.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchit","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/matchit-0.7.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libmatchit-ad9cd86a5737e43d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsame_file-d6a9d548e5ffcfd8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libbyteorder-997f07dd77cc9dd0.rlib","/workspace/target/debug/deps/libbyteorder-997f07dd77cc9dd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/crossbeam-utils-483fd5c4156a398e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwalkdir-8808999654f9f307.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.8.6","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/parking_lot_core-f018f5b066164fb9/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/crossbeam-utils-0de16309b3542eff/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zip@0.6.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-0.6.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zip","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-0.6.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["deflate","flate2"],"filenames":["/workspace/target/debug/deps/libzip-bec51feca8d559e4.rlib","/workspace/target/debug/deps/libzip-bec51feca8d559e4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.7.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","form","http1","json","matched-path","original-uri","query","tokio","tower-log","tracing"],"filenames":["/workspace/target/debug/deps/libaxum-49f1060c7a0cf5b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libthiserror-f15b12dc312255c6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@0.14.32","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-0.14.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-0.14.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","default","h2","http1","http2","runtime","server","socket2","stream","tcp"],"filenames":["/workspace/target/debug/deps/libhyper-b46c678506407d4f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.21.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.21.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dangerous_configuration","default","log","logging","tls12"],"filenames":["/workspace/target/debug/deps/librustls-acb787591ab17680.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","std","std_rng"],"filenames":["/workspace/target/debug/deps/librand-5534ea9fde5f1b5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa@4.2.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-4.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-4.2.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum_extras","chrono","default","uuid"],"filenames":["/workspace/target/debug/deps/libutoipa-43fa2e511c517910.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-utils@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed_utils-d0c17bfbba83eb54.rlib","/workspace/target/debug/deps/librust_embed_utils-d0c17bfbba83eb54.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[["MIME_TYPES_GENERATED_PATH","/workspace/target/debug/build/mime_guess-e30bf1f30ad383e5/out/mime_types_generated.rs"]],"out_dir":"/workspace/target/debug/build/mime_guess-e30bf1f30ad383e5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libsha2-a13e1109bdf85747.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/num-traits-1d3de14f68ac7114/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multer@2.1.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/build/multer-569af2ab0ff35103/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#instant@0.1.13","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/instant-0.1.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"instant","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/instant-0.1.13/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libinstant-451bb987b19b40f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#encoding_rs@0.8.35","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/encoding_rs-0.8.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"encoding_rs","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/encoding_rs-0.8.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/workspace/target/debug/deps/libencoding_rs-d6e4a190b8b4593f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicase@2.8.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicase","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/unicase-2.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libunicase-c003e858cd0625ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/build/getrandom-0cc09e5bf01f80bf/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#data-encoding@2.9.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/data-encoding-2.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"data_encoding","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/data-encoding-2.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libdata_encoding-4fac5d7a1b75e98d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf-8@0.7.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf-8-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utf-8-0.7.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libutf8-9ada4bf36b46b51c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime_guess@2.0.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime_guess","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/mime_guess-2.0.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rev-mappings"],"filenames":["/workspace/target/debug/deps/libmime_guess-8bc149c591160b81.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/getrandom-a0e6094bf561b003/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tungstenite@0.21.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tungstenite-0.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tungstenite","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tungstenite-0.21.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["data-encoding","handshake","http","httparse","sha1","url"],"filenames":["/workspace/target/debug/deps/libtungstenite-f46e3e9414bee7ce.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#multer@2.1.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/multer-ba6694f1e75f50cc/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.8.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.8.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libparking_lot_core-538fd46b47243dfb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-impl@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-impl-8.7.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rust_embed_impl","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-impl-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed_impl-e850b737efb72442.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed-utils@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-utils-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed_utils-e6b348ce3f4cda20.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/workspace/target/debug/build/num-traits-522fb7ad7a4e2fd0/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-rustls@0.24.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-rustls-0.24.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_rustls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-rustls-0.24.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","tls12"],"filenames":["/workspace/target/debug/deps/libtokio_rustls-bbb2d516b4477f65.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@6.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/build/utoipa-swagger-ui-5c71c13ae2eca9ae/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libcrossbeam_utils-bbb1e9edbf60ae5e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#combine@4.6.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/combine-4.6.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"combine","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/combine-4.6.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","bytes","futures-core-03","pin-project-lite","std","tokio","tokio-dep","tokio-util"],"filenames":["/workspace/target/debug/deps/libcombine-8f067899e29e9474.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#headers-core@0.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-core-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"headers_core","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-core-0.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libheaders_core-219e46d987ce0647.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/workspace/target/debug/deps/libaho_corasick-20d3c908746d59e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_spanned-0.6.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_spanned","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_spanned-0.6.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/workspace/target/debug/deps/libserde_spanned-43f39a507b3537ba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deadpool-runtime@0.1.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-runtime-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deadpool_runtime","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-runtime-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["tokio_1"],"filenames":["/workspace/target/debug/deps/libdeadpool_runtime-4db017bdc390b6fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.11","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["serde"],"filenames":["/workspace/target/debug/deps/libtoml_datetime-8ac89c3d7c82ec07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_cpus@1.17.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num_cpus-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_cpus","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num_cpus-1.17.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libnum_cpus-4fc91e19ce167f8a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.4.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.4.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.4.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsocket2-ba0141d904726f43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-internal-1.1.10/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"pin_project_internal","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-internal-1.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_project_internal-0c937da77a473a51.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libcrc32fast-3e9cfa9e531a7608.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.9.8","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["mutex","spin_mutex"],"filenames":["/workspace/target/debug/deps/libspin-74b126554b4646f9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/build/anyhow-6a1ab74bd806ced7/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"overload","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/liboverload-8a3b5f54a46980b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libadler2-fe366f10e00d60d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha1_smol@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1_smol-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha1_smol","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sha1_smol-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsha1_smol-d35abb30f232794c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_write@0.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_write-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_write","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_write-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libtoml_write-ac24c77d6b14838a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/liblazy_static-d0836efc8886ff28.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.12","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libwinnow-6999af5555c8fb61.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex_syntax-425ffe04e9060a5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.27","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["display","parse","serde"],"filenames":["/workspace/target/debug/deps/libtoml_edit-602605a9c430cfab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#redis@0.23.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/redis-0.23.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"redis","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/redis-0.23.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["acl","aio","async-trait","bytes","default","futures-util","geospatial","keep-alive","pin-project-lite","script","sha1_smol","socket2","streams","tokio","tokio-comp","tokio-util"],"filenames":["/workspace/target/debug/deps/libredis-55daa09e332b4438.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sharded_slab","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsharded_slab-95fa4541876a9fd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/workspace/target/debug/deps/libregex_automata-d0d55bc5c544dd77.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","linked_libs":[],"linked_paths":[],"cfgs":["std_backtrace"],"env":[],"out_dir":"/workspace/target/debug/build/anyhow-af957a5187795b42/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nu_ansi_term","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libnu_ansi_term-5f9cef388d03e624.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multer@2.1.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"multer","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/multer-2.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libmulter-fe2276fa22665bcf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["with-alloc"],"filenames":["/workspace/target/debug/deps/libminiz_oxide-684a057d89525877.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deadpool@0.10.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-0.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deadpool","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-0.10.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-trait","managed","rt_tokio_1"],"filenames":["/workspace/target/debug/deps/libdeadpool-218dd2fb91ecf7c6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.10","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-1.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-1.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libpin_project-ef3e04c111616305.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@6.0.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/workspace/target/debug/build/utoipa-swagger-ui-3ed5db516bce7fd5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/workspace/target/debug/deps/libcrossbeam_epoch-d0a29a0a374dad1e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#headers@0.3.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"headers","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/headers-0.3.9/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libheaders-81cf78595b1553d1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-embed@8.7.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-8.7.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust_embed","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-embed-8.7.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librust_embed-f1ceaaa2cdec9688.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libnum_traits-0cf43bbb351600e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-rustls@0.24.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-rustls-0.24.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_rustls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-rustls-0.24.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libhyper_rustls-49186d05307c2310.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-tungstenite@0.21.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_tungstenite","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.21.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["connect","default","handshake","stream"],"filenames":["/workspace/target/debug/deps/libtokio_tungstenite-c81fd0acef9899be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.11.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.11.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/workspace/target/debug/deps/libparking_lot-4e64c51ab778884e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libgetrandom-75950bea1efbac44.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@1.0.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pemfile","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/librustls_pemfile-9c194e533341dd5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fxhash@0.2.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fxhash-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fxhash","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fxhash-0.2.1/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libfxhash-1c4aaa3525530be3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_log","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["log-tracer","std"],"filenames":["/workspace/target/debug/deps/libtracing_log-46ab57106d2163bf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fs2@0.4.3","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fs2-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fs2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/fs2-0.4.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libfs2-4488349a98a6a593.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-impl-0.3.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_stream_impl","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-impl-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libasync_stream_impl-5eefcee219176118.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.9","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libthread_local-aab880ec972b328f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iana-time-zone@0.1.63","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/iana-time-zone-0.1.63/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iana_time_zone","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/iana-time-zone-0.1.63/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fallback"],"filenames":["/workspace/target/debug/deps/libiana_time_zone-e785532e4ab70cac.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scoped-tls@1.0.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scoped-tls-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scoped_tls","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/scoped-tls-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libscoped_tls-32c5d1d30b7f1e68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@0.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libsync_wrapper-d4b9f0dc310244d5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.25.4","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/webpki-roots-0.25.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/webpki-roots-0.25.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libwebpki_roots-2b86d273408ab463.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ipnet@2.11.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ipnet-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ipnet","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/ipnet-2.11.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libipnet-64c9916bf89ade33.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.41","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.41/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","serde","std","wasm-bindgen","wasmbind","winapi","windows-link"],"filenames":["/workspace/target/debug/deps/libchrono-45fb4ea6621abeab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#reqwest@0.11.27","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"reqwest","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__rustls","__tls","hyper-rustls","json","rustls","rustls-tls","rustls-tls-webpki-roots","serde_json","tokio-rustls","webpki-roots"],"filenames":["/workspace/target/debug/deps/libreqwest-0c49f607ecc904fa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#warp@0.3.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"warp","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","multer","multipart","tokio-tungstenite","websocket"],"filenames":["/workspace/target/debug/deps/libwarp-3f653fe5a3616380.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.19","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-subscriber-0.3.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_subscriber","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-subscriber-0.3.19/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi","default","fmt","nu-ansi-term","registry","sharded-slab","smallvec","std","thread_local","tracing-log"],"filenames":["/workspace/target/debug/deps/libtracing_subscriber-fc46a8945cd7a323.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-0.3.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_stream","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/workspace/target/debug/deps/libasync_stream-5a34f65e2bae7302.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sled@0.34.7","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sled-0.34.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sled","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/sled-0.34.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","no_metrics"],"filenames":["/workspace/target/debug/deps/libsled-23cad84ecb2e3a60.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.17.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.17.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rng","serde","std","v4"],"filenames":["/workspace/target/debug/deps/libuuid-c0432a2e6694af8b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-swagger-ui@6.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_swagger_ui","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-swagger-ui-6.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/deps/libutoipa_swagger_ui-f3b26eb1be6ac73c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deadpool-redis@0.13.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-redis-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deadpool_redis","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/deadpool-redis-0.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rt_tokio_1"],"filenames":["/workspace/target/debug/deps/libdeadpool_redis-82d0efa46bdb0973.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.1.2","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["/workspace/target/debug/deps/libflate2-1cf8f56fede915e1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.98","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.98/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libanyhow-9d81334b985de06e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/workspace/target/debug/deps/libregex-48ee19b0ab9f891b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.8.23","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","display","parse"],"filenames":["/workspace/target/debug/deps/libtoml-6bf749b053d55b5c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-redoc@3.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-redoc-3.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_redoc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-redoc-3.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/deps/libutoipa_redoc-553d606f70b91061.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utoipa-rapidoc@3.0.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-rapidoc-3.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utoipa_rapidoc","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/utoipa-rapidoc-3.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["axum"],"filenames":["/workspace/target/debug/deps/libutoipa_rapidoc-46c8af68be51d5e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#md5@0.7.0","manifest_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/md5-0.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/usr/local/cargo/registry/src/index.crates.io-6f17d22bba15001f/md5-0.7.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"3","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/workspace/target/debug/deps/libmd5-4e4bcaa3fc069eb1.rmeta"],"executable":null,"fresh":true}
    Checking kefu-system v0.1.0 (/workspace)
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ApiResponse`\n --> src/proxy/react_card_proxy.rs:1:38\n  |\n1 | use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};\n  |                                      ^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":35,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":36,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ApiResponse`","spans":[{"byte_end":48,"byte_start":37,"column_end":49,"column_start":38,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":38,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ApiResponse`\n --> src/proxy/analytics_proxy.rs:1:38\n  |\n1 | use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};\n  |                                      ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":35,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":36,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ApiResponse`","spans":[{"byte_end":48,"byte_start":37,"column_end":49,"column_start":38,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":38,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `ApiResponse`\n --> src/proxy/enterprise_proxy.rs:1:38\n  |\n1 | use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};\n  |                                      ^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":48,"byte_start":35,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":36,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `ApiResponse`","spans":[{"byte_end":48,"byte_start":37,"column_end":49,"column_start":38,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":38,"text":"use crate::api_gateway::{ApiRequest, ApiResponse, EnhancedServiceConfig};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:119:17\n    |\n118 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n119 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<ReactCardGenerationRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n               found struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardGenerationRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n   found struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardGenerationRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":3811,"byte_start":3800,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<ReactCardGenerationRequest>`","line_end":119,"line_start":119,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":3782,"byte_start":3670,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":118,"line_start":118,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:125:16\n    |\n125 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `ReactCardGenerationResponse`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:125:13\n    |\n125 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4048,"byte_start":4026,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4049,"byte_start":4023,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4048,"byte_start":4026,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ReactCardGenerationResponse`, found `ReactCardRenderResponse`","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4025,"byte_start":4023,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:145:17\n    |\n144 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n145 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<AdaptiveConfigRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n               found struct `api_gateway::ApiRequest<proxy::react_card_proxy::AdaptiveConfigRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n   found struct `api_gateway::ApiRequest<proxy::react_card_proxy::AdaptiveConfigRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4795,"byte_start":4784,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<AdaptiveConfigRequest>`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":4766,"byte_start":4654,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:151:16\n    |\n151 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `AdaptiveConfigResponse`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:151:13\n    |\n151 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":5032,"byte_start":5010,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5033,"byte_start":5007,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5032,"byte_start":5010,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `AdaptiveConfigResponse`, found `ReactCardRenderResponse`","line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5009,"byte_start":5007,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":151,"line_start":151,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:171:17\n    |\n170 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n171 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<CardTemplateRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n               found struct `api_gateway::ApiRequest<proxy::react_card_proxy::CardTemplateRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n   found struct `api_gateway::ApiRequest<proxy::react_card_proxy::CardTemplateRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5763,"byte_start":5752,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<CardTemplateRequest>`","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":5734,"byte_start":5622,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":170,"line_start":170,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:177:16\n    |\n177 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `CardTemplateResponse`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:177:13\n    |\n177 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6000,"byte_start":5978,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6001,"byte_start":5975,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6000,"byte_start":5978,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `CardTemplateResponse`, found `ReactCardRenderResponse`","line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5977,"byte_start":5975,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":177,"line_start":177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:205:17\n    |\n204 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n205 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n               found struct `api_gateway::ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n   found struct `api_gateway::ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6995,"byte_start":6984,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`","line_end":205,"line_start":205,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":6966,"byte_start":6854,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":204,"line_start":204,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0608]: cannot index into a value of type `proxy::react_card_proxy::ReactCardRenderResponse`\n   --> src/proxy/react_card_proxy.rs:211:38\n    |\n211 |             Ok(response.data.unwrap()[\"template_id\"].as_str().unwrap().to_string())\n    |                                      ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0608","explanation":"An attempt to use index on a type which doesn't implement the `std::ops::Index`\ntrait was performed.\n\nErroneous code example:\n\n```compile_fail,E0608\n0u8[2]; // error: cannot index into a value of type `u8`\n```\n\nTo be able to index into a type it needs to implement the `std::ops::Index`\ntrait. Example:\n\n```\nlet v: Vec<u8> = vec![0, 1, 2, 3];\n\n// The `Vec` type implements the `Index` trait so you can do:\nprintln!(\"{}\", v[2]);\n```\n"},"level":"error","message":"cannot index into a value of type `proxy::react_card_proxy::ReactCardRenderResponse`","spans":[{"byte_end":7247,"byte_start":7232,"column_end":53,"column_start":38,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":38,"text":"            Ok(response.data.unwrap()[\"template_id\"].as_str().unwrap().to_string())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:228:17\n    |\n227 |             crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>(\n    |             ---------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n228 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n               found struct `api_gateway::ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::react_card_proxy::ReactCardRenderRequest>`\n   found struct `api_gateway::ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7992,"byte_start":7981,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `ApiRequest<ReactCardRenderRequest>`, found `ApiRequest<Value>`","line_end":228,"line_start":228,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":7963,"byte_start":7851,"column_end":125,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":227,"line_start":227,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<ReactCardRenderRequest, ReactCardRenderResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/react_card_proxy.rs:234:16\n    |\n234 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<HashMap<String, Value>>`, found `ReactCardRenderResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `std::vec::Vec<std::collections::HashMap<std::string::String, serde_json::Value>>`\n               found struct `proxy::react_card_proxy::ReactCardRenderResponse`\nhelp: the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed\n   --> src/proxy/react_card_proxy.rs:234:13\n    |\n234 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::vec::Vec<std::collections::HashMap<std::string::String, serde_json::Value>>`\n   found struct `proxy::react_card_proxy::ReactCardRenderResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::react_card_proxy::ReactCardRenderResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":8229,"byte_start":8207,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8230,"byte_start":8204,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":null,"line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8229,"byte_start":8207,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":true,"label":"expected `Vec<HashMap<String, Value>>`, found `ReactCardRenderResponse`","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8206,"byte_start":8204,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/react_card_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:139:17\n    |\n138 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n139 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<UserBehaviorRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n               found struct `api_gateway::ApiRequest<proxy::analytics_proxy::UserBehaviorRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n   found struct `api_gateway::ApiRequest<proxy::analytics_proxy::UserBehaviorRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4492,"byte_start":4481,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<UserBehaviorRequest>`","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":4463,"byte_start":4353,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:145:16\n    |\n145 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `UserBehaviorResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:145:13\n    |\n145 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4728,"byte_start":4706,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4729,"byte_start":4703,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4728,"byte_start":4706,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `UserBehaviorResponse`, found `AnalyticsEventResponse`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4705,"byte_start":4703,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:165:17\n    |\n164 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n165 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<MessageAnalysisRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n               found struct `api_gateway::ApiRequest<proxy::analytics_proxy::MessageAnalysisRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n   found struct `api_gateway::ApiRequest<proxy::analytics_proxy::MessageAnalysisRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5461,"byte_start":5450,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<MessageAnalysisRequest>`","line_end":165,"line_start":165,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":5432,"byte_start":5322,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":164,"line_start":164,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:171:16\n    |\n171 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `MessageAnalysisResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:171:13\n    |\n171 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":5697,"byte_start":5675,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5698,"byte_start":5672,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5697,"byte_start":5675,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `MessageAnalysisResponse`, found `AnalyticsEventResponse`","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5674,"byte_start":5672,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":171,"line_start":171,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:191:17\n    |\n190 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n191 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<RealTimeMetricsRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n               found struct `api_gateway::ApiRequest<proxy::analytics_proxy::RealTimeMetricsRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n   found struct `api_gateway::ApiRequest<proxy::analytics_proxy::RealTimeMetricsRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6436,"byte_start":6425,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<RealTimeMetricsRequest>`","line_end":191,"line_start":191,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":6407,"byte_start":6297,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":190,"line_start":190,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:197:16\n    |\n197 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `RealTimeMetricsResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:197:13\n    |\n197 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6672,"byte_start":6650,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6673,"byte_start":6647,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6672,"byte_start":6650,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `RealTimeMetricsResponse`, found `AnalyticsEventResponse`","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6649,"byte_start":6647,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":197,"line_start":197,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:217:17\n    |\n216 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n217 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<SmartRecommendationRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n               found struct `api_gateway::ApiRequest<proxy::analytics_proxy::SmartRecommendationRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n   found struct `api_gateway::ApiRequest<proxy::analytics_proxy::SmartRecommendationRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7427,"byte_start":7416,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<SmartRecommendationRequest>`","line_end":217,"line_start":217,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":7398,"byte_start":7288,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:223:16\n    |\n223 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `SmartRecommendationResponse`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:223:13\n    |\n223 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":7663,"byte_start":7641,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7664,"byte_start":7638,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7663,"byte_start":7641,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `SmartRecommendationResponse`, found `AnalyticsEventResponse`","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7640,"byte_start":7638,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":223,"line_start":223,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:249:17\n    |\n248 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n249 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n               found struct `api_gateway::ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n   found struct `api_gateway::ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8584,"byte_start":8573,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`","line_end":249,"line_start":249,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":8555,"byte_start":8445,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":248,"line_start":248,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:255:16\n    |\n255 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n               found struct `proxy::analytics_proxy::AnalyticsEventResponse`\nhelp: the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:255:13\n    |\n255 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n   found struct `proxy::analytics_proxy::AnalyticsEventResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":8820,"byte_start":8798,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8821,"byte_start":8795,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8820,"byte_start":8798,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `AnalyticsEventResponse`","line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8797,"byte_start":8795,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:281:17\n    |\n280 |             crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>(\n    |             -------------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n281 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n               found struct `api_gateway::ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::analytics_proxy::AnalyticsEventRequest>`\n   found struct `api_gateway::ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9746,"byte_start":9735,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `ApiRequest<AnalyticsEventRequest>`, found `ApiRequest<Value>`","line_end":281,"line_start":281,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":9717,"byte_start":9607,"column_end":123,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":280,"line_start":280,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":123,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<AnalyticsEventRequest, AnalyticsEventResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/analytics_proxy.rs:287:16\n    |\n287 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `AnalyticsEventResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n               found struct `proxy::analytics_proxy::AnalyticsEventResponse`\nhelp: the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed\n   --> src/proxy/analytics_proxy.rs:287:13\n    |\n287 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n   found struct `proxy::analytics_proxy::AnalyticsEventResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::analytics_proxy::AnalyticsEventResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":9982,"byte_start":9960,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":9983,"byte_start":9957,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9982,"byte_start":9960,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `AnalyticsEventResponse`","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":9959,"byte_start":9957,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/analytics_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:137:17\n    |\n136 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n137 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HealthMonitorRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::HealthMonitorRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::HealthMonitorRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4217,"byte_start":4206,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HealthMonitorRequest>`","line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":4188,"byte_start":4082,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:143:16\n    |\n143 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HealthMonitorResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:143:13\n    |\n143 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":4454,"byte_start":4432,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4455,"byte_start":4429,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":4454,"byte_start":4432,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `HealthMonitorResponse`, found `LoadBalancerResponse`","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":4431,"byte_start":4429,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:163:17\n    |\n162 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n163 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<PerformanceOptimizationRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::PerformanceOptimizationRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::PerformanceOptimizationRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5207,"byte_start":5196,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<PerformanceOptimizationRequest>`","line_end":163,"line_start":163,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":5178,"byte_start":5072,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:169:16\n    |\n169 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `PerformanceOptimizationResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:169:13\n    |\n169 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":5444,"byte_start":5422,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5445,"byte_start":5419,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":5444,"byte_start":5422,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `PerformanceOptimizationResponse`, found `LoadBalancerResponse`","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":5421,"byte_start":5419,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:189:17\n    |\n188 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n189 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<FailoverRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::FailoverRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::FailoverRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6152,"byte_start":6141,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<FailoverRequest>`","line_end":189,"line_start":189,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":6123,"byte_start":6017,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":188,"line_start":188,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:195:16\n    |\n195 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `FailoverResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:195:13\n    |\n195 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":6389,"byte_start":6367,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6390,"byte_start":6364,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6389,"byte_start":6367,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `FailoverResponse`, found `LoadBalancerResponse`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":6366,"byte_start":6364,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:215:17\n    |\n214 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n215 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<AutoScalingRequest>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::AutoScalingRequest>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<proxy::enterprise_proxy::AutoScalingRequest>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7096,"byte_start":7085,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<AutoScalingRequest>`","line_end":215,"line_start":215,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":7067,"byte_start":6961,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":214,"line_start":214,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:221:16\n    |\n221 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `AutoScalingResponse`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:221:13\n    |\n221 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":7333,"byte_start":7311,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7334,"byte_start":7308,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7333,"byte_start":7311,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `AutoScalingResponse`, found `LoadBalancerResponse`","line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":7310,"byte_start":7308,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":221,"line_start":221,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:238:17\n    |\n237 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n238 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8031,"byte_start":8020,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`","line_end":238,"line_start":238,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":8002,"byte_start":7896,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":237,"line_start":237,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:244:16\n    |\n244 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n               found struct `proxy::enterprise_proxy::LoadBalancerResponse`\nhelp: the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:244:13\n    |\n244 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n   found struct `proxy::enterprise_proxy::LoadBalancerResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":8268,"byte_start":8246,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8269,"byte_start":8243,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8268,"byte_start":8246,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `LoadBalancerResponse`","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":8245,"byte_start":8243,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":244,"line_start":244,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:264:17\n    |\n263 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n264 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HashMap<String, Value>>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<std::collections::HashMap<std::string::String, serde_json::Value>>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<std::collections::HashMap<std::string::String, serde_json::Value>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":8998,"byte_start":8987,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<HashMap<String, Value>>`","line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":8969,"byte_start":8863,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":263,"line_start":263,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0608]: cannot index into a value of type `proxy::enterprise_proxy::LoadBalancerResponse`\n   --> src/proxy/enterprise_proxy.rs:270:38\n    |\n270 |             Ok(response.data.unwrap()[\"config_id\"].as_str().unwrap().to_string())\n    |                                      ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0608","explanation":"An attempt to use index on a type which doesn't implement the `std::ops::Index`\ntrait was performed.\n\nErroneous code example:\n\n```compile_fail,E0608\n0u8[2]; // error: cannot index into a value of type `u8`\n```\n\nTo be able to index into a type it needs to implement the `std::ops::Index`\ntrait. Example:\n\n```\nlet v: Vec<u8> = vec![0, 1, 2, 3];\n\n// The `Vec` type implements the `Index` trait so you can do:\nprintln!(\"{}\", v[2]);\n```\n"},"level":"error","message":"cannot index into a value of type `proxy::enterprise_proxy::LoadBalancerResponse`","spans":[{"byte_end":9248,"byte_start":9235,"column_end":51,"column_start":38,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":270,"line_start":270,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":38,"text":"            Ok(response.data.unwrap()[\"config_id\"].as_str().unwrap().to_string())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:296:17\n    |\n295 |             crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>(\n    |             ---------------------------------------------------------------------------------------------------------- arguments to this function are incorrect\n296 |                 api_request,\n    |                 ^^^^^^^^^^^ expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`\n    |\n    = note: expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n               found struct `api_gateway::ApiRequest<serde_json::Value>`\nnote: function defined here\n   --> src/api_gateway.rs:71:14\n    |\n71  | pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>(\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n72  |     request: ApiRequest<T>,\n    |     ----------------------\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `api_gateway::ApiRequest<proxy::enterprise_proxy::LoadBalancerRequest>`\n   found struct `api_gateway::ApiRequest<serde_json::Value>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":2092,"byte_start":2070,"column_end":27,"column_start":5,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":false,"label":"","line_end":72,"line_start":72,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":5,"text":"    request: ApiRequest<T>,"}]},{"byte_end":2020,"byte_start":1979,"column_end":55,"column_start":14,"expansion":null,"file_name":"src/api_gateway.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":14,"text":"pub async fn forward_to_enhanced_service_with_response<T: Serialize, R: for<'de> Deserialize<'de>>("}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":10185,"byte_start":10174,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `ApiRequest<LoadBalancerRequest>`, found `ApiRequest<Value>`","line_end":296,"line_start":296,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"                api_request,"}]},{"byte_end":10156,"byte_start":10050,"column_end":119,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":295,"line_start":295,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":119,"highlight_start":13,"text":"            crate::api_gateway::forward_to_enhanced_service_with_response::<LoadBalancerRequest, LoadBalancerResponse>("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/proxy/enterprise_proxy.rs:302:16\n    |\n302 |             Ok(response.data.unwrap())\n    |             -- ^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `LoadBalancerResponse`\n    |             |\n    |             arguments to this enum variant are incorrect\n    |\n    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n               found struct `proxy::enterprise_proxy::LoadBalancerResponse`\nhelp: the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed\n   --> src/proxy/enterprise_proxy.rs:302:13\n    |\n302 |             Ok(response.data.unwrap())\n    |             ^^^----------------------^\n    |                |\n    |                this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs:531:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`\n   found struct `proxy::enterprise_proxy::LoadBalancerResponse`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the type constructed contains `proxy::enterprise_proxy::LoadBalancerResponse` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":10422,"byte_start":10400,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"this argument influences the type of `Ok`","line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":10423,"byte_start":10397,"column_end":39,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":null,"line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":19710,"byte_start":19708,"column_end":7,"column_start":5,"expansion":null,"file_name":"/rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14/library/core/src/result.rs","is_primary":true,"label":null,"line_end":531,"line_start":531,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":10422,"byte_start":10400,"column_end":38,"column_start":16,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":true,"label":"expected `HashMap<String, Value>`, found `LoadBalancerResponse`","line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":16,"text":"            Ok(response.data.unwrap())"}]},{"byte_end":10399,"byte_start":10397,"column_end":15,"column_start":13,"expansion":null,"file_name":"src/proxy/enterprise_proxy.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":302,"line_start":302,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":13,"text":"            Ok(response.data.unwrap())"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 36 previous errors; 3 warnings emitted\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 36 previous errors; 3 warnings emitted","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0308, E0608.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0308, E0608.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///workspace#kefu-system@0.1.0","manifest_path":"/workspace/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"kefu_system","src_path":"/workspace/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0308`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0308`.","spans":[]}}
error: could not compile `kefu-system` (lib) due to 37 previous errors; 3 warnings emitted
{"reason":"build-finished","success":false}
